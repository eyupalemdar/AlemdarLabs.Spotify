<Grid RowDefinitions="Auto">
    @for (int index = 0; index < Songs.Count; index++)
    {
        var currentSong = Songs[index];

        <GridCell Row="0" Column="@index">
            <StackLayout Margin="new Thickness(10,0,5,0)">
                <ImageButton Source="@ImageSource.FromUri(new Uri(currentSong.AlbumImageUrl))"
                             OnClick="@((e) => OpenPlayer(currentSong))"
                             WidthRequest="136" HeightRequest="136"
                             HorizontalOptions="LayoutOptions.Start" />
                <Label Text="@currentSong.Title" TextColor="@Color.White"
                       class="bold-label"
                       FontFamily="ProximaNova-Bold"
                       FontSize="13"
                       HorizontalTextAlignment="TextAlignment.Start"
                       LineBreakMode="LineBreakMode.TailTruncation" />
                <Label Text="@currentSong.Artist" TextColor="@AppResources.GreyColor"
                       FontSize="12"
                       FontFamily="ProximaNova"
                       Margin="new Thickness(0,-5,0,0)"
                       HorizontalTextAlignment="TextAlignment.Start"
                       LineBreakMode="LineBreakMode.TailTruncation" />
            </StackLayout>
        </GridCell>
    }
</Grid>

<ModalContainer @ref="PlayerContainer" OnClosed="OnClosePlayer">
    <PlayerPage @ref="PlayerPage" Song="@StateManager.CurrentPlayingSong" OnClose="OnClosePlayer" />
</ModalContainer>

@code {
    [Parameter] public List<Song> Songs { get; set; }

    [CascadingParameter(Name = "HomePage")]
    public Home HomePage { get; set; }

    private ModalContainer PlayerContainer;
    PlayerPage PlayerPage;

    private void OpenPlayer(Song song)
    {
        StateManager.CurrentPlayingSong = song;
        PlayerContainer?.ShowDialog();
    }

    private void OnClosePlayer()
    {
        PlayerContainer.FinishClosingDialog();
        HomePage.StateHasChangedAsync().GetAwaiter().GetResult();
    }
}
